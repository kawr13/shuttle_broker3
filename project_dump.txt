# services/wms_integration.py
import asyncio
from typing import Dict, List, Tuple
from enum import Enum
import aiohttp
from core.logging_config import logger

class ShuttleCommand(Enum):
    PICKUP = "pickup"
    DELIVERY = "delivery"
    # Добавьте другие команды по мере необходимости
class WMSIntegration:
    base_url: str = ""
    username: str = ""
    password: str = ""

    def __init__(self, base_url: str, username: str, password: str):
        self.base_url = base_url
        self.username = username
        self.password = password

    async def get_commands(self) -> List[Dict]:
        """Получает команды из WMS"""
        logger.info("Начинаем получение команд из WMS")

        commands = []

        # Получаем команды для отгрузок и перемещений
            shipment_commands = await self._get_shipment_commands()
            transfer_commands = await self._get_transfer_commands()
        for cmd in shipment_commands:
            external_id = cmd.get("externalId")
            shuttle_command_str = cmd.get("shuttleCommand")
    """Включает использование мок-сервера для WMS интеграции"""
    from services.wms_integration import wms_integration

    # Патчим методы в объекте wms_integration
    wms_integration.base_url = "http://localhost:8000/wms-mock"

    logger.info("WMS интеграция настроена на использование мок-сервера")
    return {"status": "success", "message": "WMS интеграция настроена на использование мок-сервера"}

